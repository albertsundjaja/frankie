// Code generated by go-swagger; DO NOT EDIT.

package test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/albertsundjaja/frankie/models"
)

// NewUSDKCheckParams creates a new USDKCheckParams object
// no default values defined in spec.
func NewUSDKCheckParams() USDKCheckParams {

	return USDKCheckParams{}
}

// USDKCheckParams contains all the bound params for the u s d k check operation
// typically these are obtained from a http.Request
//
// swagger:parameters USDKCheck
type USDKCheckParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*This is what the JSON that is exported from the SDK should look like. It's an array of objects that contain the details from each different provider wrapped up in the Universal SDK.

	  Required: true
	  In: body
	*/
	DeviceCheckDetails models.DeviceCheckDetailsObjectCollection
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUSDKCheckParams() beforehand.
func (o *USDKCheckParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.DeviceCheckDetailsObjectCollection
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("deviceCheckDetails", "body"))
			} else {
				res = append(res, errors.NewParseError("deviceCheckDetails", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.DeviceCheckDetails = body
			}
		}
	} else {
		res = append(res, errors.Required("deviceCheckDetails", "body"))
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
