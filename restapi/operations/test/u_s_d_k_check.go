// Code generated by go-swagger; DO NOT EDIT.

package test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// USDKCheckHandlerFunc turns a function with the right signature into a u s d k check handler
type USDKCheckHandlerFunc func(USDKCheckParams) middleware.Responder

// Handle executing the request and returning a response
func (fn USDKCheckHandlerFunc) Handle(params USDKCheckParams) middleware.Responder {
	return fn(params)
}

// USDKCheckHandler interface for that can handle valid u s d k check params
type USDKCheckHandler interface {
	Handle(USDKCheckParams) middleware.Responder
}

// NewUSDKCheck creates a new http.Handler for the u s d k check operation
func NewUSDKCheck(ctx *middleware.Context, handler USDKCheckHandler) *USDKCheck {
	return &USDKCheck{Context: ctx, Handler: handler}
}

/*USDKCheck swagger:route POST /isgood Test uSDKCheck

Check that the output of the universal SDK is fine

Simple check to see if the service is running smoothly.

The body that you post here should be the direct output of the SDK's GetSessionData call.


*/
type USDKCheck struct {
	Context *middleware.Context
	Handler USDKCheckHandler
}

func (o *USDKCheck) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUSDKCheckParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
